class Solution(object):
    def mergeKLists(self, lists):
        if not lists or len(lists)==0:
            return None
        while len(lists) >1:
            mergedlists=[]
            for i in range (0,len(lists),2):
                list1=lists[i]
                list2=lists[i+1]if (i+1)>len(lists)else None
                mergedlists.append(self.mergeLists(list1,list2))
            lists=mergedlists
        return lists[0]
    def mergeLists(self, list1, list2):
        dummy=ListNode()
        tail = dummy
        while list1 and list2:
            if list1.val<list2.val:
                tail.next=list1
                list1=list1.next
            else:
                tail.next=list2
                list2=list2.next
            tail=tail.next

        if list1:
            tail.next=list1
        elif list2:
            tail.next=list2
        return dummy.next  
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                     an other way
class Solution(object):
    def mergeKLists(self, lists):
        values,head,pointer=[],None,None
        for l in lists:
            while l:
                heappush(values,l.val)
                l=l.next

        while values:
            if head is None:
                head=ListNode(heappop(values))
                pointer=head

            else:
                pointer.next=ListNode(heappop(values))
                pointer=pointer.next

        return head 
